{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"Print to console": {
		"prefix": "cpp",
		"body": [
			"#include <bits/stdc++.h>",
			"#include <ext/pb_ds/assoc_container.hpp>",
			"#include <ext/pb_ds/tree_policy.hpp>",
			"using namespace std;",
			"using namespace __gnu_pbds;",
			"typedef tree<int, null_type, less_equal<int>, rb_tree_tag, tree_order_statistics_node_update> pbds;",
			"#define int long long int",
			"#define fass ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);",
			"#define random(l, r,T) uniform_int_distribution<T>(l, r)(rng)",
			"mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());",
			"const int mod=1e9+7;",
			"int stoi(string &s){ int num=0; for(int i=0;i<s.size();i++)num=num*10+(s[i]-'0'); return num;}",
			"int power(int a,int b){ int ans=1; while(b!=0){ if((b&1)) ans=(ans*a)%mod; b/=2; a=(a*a)%mod; } return ans;}",
			"void asort(vector<int>&v){ sort(v.begin(),v.end()); }",
			"void dsort(vector<int>&v){ sort(v.begin(),v.end(),greater<int>());}",
			"void env(vector<int>&a){ for(int i=0;i<a.size();i++) cin>>a[i];}",
			"int f(int a) { if(a<=0) return 0; int res[] = {a,1ll,a+1ll,0ll}; return res[a%4ll]; }",
			"int getXor(int a, int b) { return f(b)^f(a-1);}",
			"void printv(vector<int>&v) { for(auto a:v)cout<<a<<\" \"; cout<<endl;}",
			"signed main()",
			"{",
			"\t#ifndef ONLINE_JUDGE",
			"\tfreopen(\"input.txt\",\"r\",stdin);",
			"\tfreopen(\"output.txt\",\"w\",stdout);",
			"\t#endif",
			"\tfass",
			"\tint t=1;",
			"\tcin>>t;",
			"\twhile(t--)",
			"\t{",
			"\t\t/*Always set upper_bound in binary search carefully*/",
			"\t}",
			"\treturn 0;",
			"}"
		],
		"description": "Log output to console"
	}
}
